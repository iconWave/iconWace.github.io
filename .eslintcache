[{"/Users/liangjingtao/Desktop/vite-ts-vue3/src/App.vue":"1","/Users/liangjingtao/Desktop/vite-ts-vue3/src/components/HelloWorld.vue":"2","/Users/liangjingtao/Desktop/vite-ts-vue3/src/main.ts":"3","/Users/liangjingtao/Desktop/vite-ts-vue3/src/test.ts":"4","/Users/liangjingtao/Desktop/vite-ts-vue3/src/test.vue":"5","/Users/liangjingtao/Desktop/vite-ts-vue3/src/vite-env.d.ts":"6"},{"size":750,"mtime":1658543047876,"results":"7","hashOfConfig":"8"},{"size":785,"mtime":1658545096198},{"size":111,"mtime":1658546171073,"results":"9","hashOfConfig":"8"},{"size":20,"mtime":1658544083370},{"size":43,"mtime":1658545238668},{"size":186,"mtime":1658482731274,"results":"10","hashOfConfig":"8"},{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"24tmye",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/liangjingtao/Desktop/vite-ts-vue3/src/App.vue",["20"],[],"/Users/liangjingtao/Desktop/vite-ts-vue3/src/main.ts",["21"],[],"/Users/liangjingtao/Desktop/vite-ts-vue3/src/vite-env.d.ts",["22","23","24","25"],[],{"ruleId":"26","message":"27","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"26","message":"27","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"26","message":"27","line":1,"column":1,"endLine":1,"endColumn":2,"severity":2,"nodeType":null},{"ruleId":"28","severity":2,"message":"29","line":5,"column":36,"nodeType":"30","messageId":"31","endLine":5,"endColumn":38},{"ruleId":"28","severity":2,"message":"29","line":5,"column":40,"nodeType":"30","messageId":"31","endLine":5,"endColumn":42},{"ruleId":"32","severity":2,"message":"33","line":5,"column":44,"nodeType":"34","messageId":"35","endLine":5,"endColumn":47,"suggestions":"36"},"@typescript-eslint/ban-ts-ignore","Definition for rule '@typescript-eslint/ban-ts-ignore' was not found.","@typescript-eslint/ban-types","Don't use `{}` as a type. `{}` actually means \"any non-nullish value\".\n- If you want a type meaning \"any object\", you probably want `Record<string, unknown>` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.\n- If you want a type meaning \"empty object\", you probably want `Record<string, never>` instead.","TSTypeLiteral","bannedTypeMessage","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["37","38"],{"messageId":"39","fix":"40","desc":"41"},{"messageId":"42","fix":"43","desc":"44"},"suggestUnknown",{"range":"45","text":"46"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"45","text":"47"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",[152,155],"unknown","never"]